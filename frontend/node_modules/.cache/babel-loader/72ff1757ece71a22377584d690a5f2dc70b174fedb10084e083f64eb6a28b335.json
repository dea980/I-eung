{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8000';\nconst client = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 인터셉터 설정\nclient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// API 타입 정의\n\n// API 함수들\nexport const api = {\n  // 사용자 관련\n  login: async (email, password) => {\n    const response = await client.post('/users/login', {\n      email,\n      password\n    });\n    return response.data;\n  },\n  register: async (name, email, password) => {\n    const response = await client.post('/users', {\n      name,\n      email,\n      password\n    });\n    return response.data;\n  },\n  // 레시피 관련\n  getRecipes: async () => {\n    const response = await client.get('/recipes');\n    return response.data;\n  },\n  getRecipeById: async id => {\n    const response = await client.get(`/recipes/${id}`);\n    return response.data;\n  },\n  recommendRecipes: async (ingredients, tools) => {\n    const response = await client.post('/recipes/recommend', {\n      ingredients,\n      tools\n    });\n    return response.data;\n  },\n  generateRecipe: async ingredients => {\n    const response = await client.post('/recipes/generate', {\n      ingredients\n    });\n    return response.data;\n  },\n  // 재료 관련\n  getIngredients: async () => {\n    const response = await client.get('/ingredients');\n    return response.data;\n  },\n  addIngredient: async ingredient => {\n    const response = await client.post('/ingredients', ingredient);\n    return response.data;\n  },\n  // 도구 관련\n  getTools: async () => {\n    const response = await client.get('/tools');\n    return response.data;\n  },\n  addTool: async name => {\n    const response = await client.post('/tools', {\n      name\n    });\n    return response.data;\n  },\n  // 즐겨찾기 관련\n  addToFavorites: async (userId, recipeId) => {\n    const response = await client.post(`/users/${userId}/favorites/${recipeId}`);\n    return response.data;\n  },\n  getFavorites: async userId => {\n    const response = await client.get(`/users/${userId}/favorites`);\n    return response.data;\n  },\n  // 장보기 목록 관련\n  addToShoppingList: async (userId, item) => {\n    const response = await client.post(`/users/${userId}/shopping-list`, item);\n    return response.data;\n  },\n  getShoppingList: async userId => {\n    const response = await client.get(`/users/${userId}/shopping-list`);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","client","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","api","login","email","password","response","post","data","register","name","getRecipes","get","getRecipeById","id","recommendRecipes","ingredients","tools","generateRecipe","getIngredients","addIngredient","ingredient","getTools","addTool","addToFavorites","userId","recipeId","getFavorites","addToShoppingList","item","getShoppingList"],"sources":["/Users/daeyeop/Desktop/I-eung/frontend/src/api/client.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8000';\n\nconst client = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 인터셉터 설정\nclient.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// API 타입 정의\nexport interface Recipe {\n  id: number;\n  name: string;\n  instructions: string;\n  cooking_time: number;\n  difficulty: string;\n  is_ai_generated: boolean;\n}\n\nexport interface Ingredient {\n  id: number;\n  name: string;\n  quantity?: number;\n  unit?: string;\n  price?: number;\n}\n\nexport interface Tool {\n  id: number;\n  name: string;\n}\n\n// API 함수들\nexport const api = {\n  // 사용자 관련\n  login: async (email: string, password: string) => {\n    const response = await client.post('/users/login', { email, password });\n    return response.data;\n  },\n\n  register: async (name: string, email: string, password: string) => {\n    const response = await client.post('/users', { name, email, password });\n    return response.data;\n  },\n\n  // 레시피 관련\n  getRecipes: async () => {\n    const response = await client.get<Recipe[]>('/recipes');\n    return response.data;\n  },\n\n  getRecipeById: async (id: number) => {\n    const response = await client.get<Recipe>(`/recipes/${id}`);\n    return response.data;\n  },\n\n  recommendRecipes: async (ingredients: Ingredient[], tools: string[]) => {\n    const response = await client.post('/recipes/recommend', { ingredients, tools });\n    return response.data;\n  },\n\n  generateRecipe: async (ingredients: string[]) => {\n    const response = await client.post<Recipe>('/recipes/generate', { ingredients });\n    return response.data;\n  },\n\n  // 재료 관련\n  getIngredients: async () => {\n    const response = await client.get<Ingredient[]>('/ingredients');\n    return response.data;\n  },\n\n  addIngredient: async (ingredient: Omit<Ingredient, 'id'>) => {\n    const response = await client.post('/ingredients', ingredient);\n    return response.data;\n  },\n\n  // 도구 관련\n  getTools: async () => {\n    const response = await client.get<Tool[]>('/tools');\n    return response.data;\n  },\n\n  addTool: async (name: string) => {\n    const response = await client.post('/tools', { name });\n    return response.data;\n  },\n\n  // 즐겨찾기 관련\n  addToFavorites: async (userId: number, recipeId: number) => {\n    const response = await client.post(`/users/${userId}/favorites/${recipeId}`);\n    return response.data;\n  },\n\n  getFavorites: async (userId: number) => {\n    const response = await client.get(`/users/${userId}/favorites`);\n    return response.data;\n  },\n\n  // 장보기 목록 관련\n  addToShoppingList: async (userId: number, item: { ingredient_id: number; quantity: number; unit: string }) => {\n    const response = await client.post(`/users/${userId}/shopping-list`, item);\n    return response.data;\n  },\n\n  getShoppingList: async (userId: number) => {\n    const response = await client.get(`/users/${userId}/shopping-list`);\n    return response.data;\n  },\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}