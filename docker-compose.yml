## Docker Compose version
version: '3.8'

services: ## containers Services
  frontend: ## frontend
    build:
      context: ./frontend ## frontend application's source code's directory
      dockerfile: Dockerfile ##Dokcer file 을 사용해 컨테이너 이미지 빌드
    ports:
      - "80:80" ## 로컬 머신 80 번 포트를 컨테이너의 80 번 포트에 Mapping. 즉, 브라우저에서 localhost로 접소하면 프론트엔드 서비스 표시
    depends_on:
      - backend ## 백엔드 서비스에 의존 , Docker 벡엔드 서비스가 실행후 프론트 실행
    environment:
      - REACT_APP_API_URL=http://localhost:8000 ## 프론트엔드 에플리케이션이 사용하는 API URL를 설정, 로컬 환경에서 벡엔드 API는 localhost:8000 에서 실행.

  backend:
    build:
      context: ./backend ## 벡엔드 소스 코드가 위치한 디렉토리 지정
      dockerfile: Dockerfile ## Dockerfile에서 백엔드 이미지를 빌드
    ports:
      - "8000:8000" ## 로컬 머진 8000 번 포트를 컨테이너의 8000번 Port Mapping , local host:800 로 접속시 벡엔드 API가 작동
    environment:
      - DATABASE_URL=${DATABASE_URL} ## 데이터베이스 연결 URL
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID} ## Google 로그인 에 필요한 Client ID.
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET} # Google Login 에 필요한 클라이언트 Secret key
      - JWT_SECRET=${JWT_SECRET} # Json Web Token(JWT) 암호화 사용할 비밀키
      ## ${} = 환경변수 값을 시스템에서 가져오는 것을 의미.
    volumes:
      - ./backend:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload ## python FAST API 실행
      ## --host 0.0.0.0: 외부에서 접근할 수 있도록 모든 IP 주소를 허용.
      ## --port 8000: 8000번 포트에서 서버 실행.
      ## --reload: 코드 변경 시 서버를 자동으로 다시 시작하는 개발용 옵션.
networks:
  default: ## 서비스 간 통신을 위한 네트워크를 생성
    driver: bridge ## Docker 컨테이너 간 가상 네트워크 생성, 그후 연결